///
/// AudioSourceAndroidType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::audiorecorderplayer {

  /**
   * An enum which can be represented as a JavaScript enum (AudioSourceAndroidType).
   */
  enum class AudioSourceAndroidType {
    DEFAULT      SWIFT_NAME(default) = 0,
    MIC      SWIFT_NAME(mic) = 1,
    VOICE_UPLINK      SWIFT_NAME(voiceUplink) = 2,
    VOICE_DOWNLINK      SWIFT_NAME(voiceDownlink) = 3,
    VOICE_CALL      SWIFT_NAME(voiceCall) = 4,
    CAMCORDER      SWIFT_NAME(camcorder) = 5,
    VOICE_RECOGNITION      SWIFT_NAME(voiceRecognition) = 6,
    VOICE_COMMUNICATION      SWIFT_NAME(voiceCommunication) = 7,
    REMOTE_SUBMIX      SWIFT_NAME(remoteSubmix) = 8,
    UNPROCESSED      SWIFT_NAME(unprocessed) = 9,
    RADIO_TUNER      SWIFT_NAME(radioTuner) = 1998,
    HOTWORD      SWIFT_NAME(hotword) = 1999,
  } CLOSED_ENUM;

} // namespace margelo::nitro::audiorecorderplayer

namespace margelo::nitro {

  using namespace margelo::nitro::audiorecorderplayer;

  // C++ AudioSourceAndroidType <> JS AudioSourceAndroidType (enum)
  template <>
  struct JSIConverter<AudioSourceAndroidType> final {
    static inline AudioSourceAndroidType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<AudioSourceAndroidType>(enumValue);
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, AudioSourceAndroidType arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(runtime, enumValue);
    }
    static inline bool canConvert(jsi::Runtime&, const jsi::Value& value) {
      if (!value.isNumber()) {
        return false;
      }
      double number = value.getNumber();
      int integer = static_cast<int>(number);
      if (number != integer) {
        // The integer is not the same value as the double - we truncated floating points.
        // Enums are all integers, so the input floating point number is obviously invalid.
        return false;
      }
      switch (integer) {
        case 0 /* DEFAULT */: return true;
        case 1 /* MIC */: return true;
        case 2 /* VOICE_UPLINK */: return true;
        case 3 /* VOICE_DOWNLINK */: return true;
        case 4 /* VOICE_CALL */: return true;
        case 5 /* CAMCORDER */: return true;
        case 6 /* VOICE_RECOGNITION */: return true;
        case 7 /* VOICE_COMMUNICATION */: return true;
        case 8 /* REMOTE_SUBMIX */: return true;
        case 9 /* UNPROCESSED */: return true;
        case 1998 /* RADIO_TUNER */: return true;
        case 1999 /* HOTWORD */: return true;
        default: return false;
      }
    }
  };

} // namespace margelo::nitro
