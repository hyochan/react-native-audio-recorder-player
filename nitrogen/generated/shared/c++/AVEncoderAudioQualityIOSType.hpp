///
/// AVEncoderAudioQualityIOSType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::audiorecorderplayer {

  /**
   * An enum which can be represented as a JavaScript enum (AVEncoderAudioQualityIOSType).
   */
  enum class AVEncoderAudioQualityIOSType {
    MIN      SWIFT_NAME(min) = 0,
    LOW      SWIFT_NAME(low) = 32,
    MEDIUM      SWIFT_NAME(medium) = 64,
    HIGH      SWIFT_NAME(high) = 96,
    MAX      SWIFT_NAME(max) = 127,
  } CLOSED_ENUM;

} // namespace margelo::nitro::audiorecorderplayer

namespace margelo::nitro {

  // C++ AVEncoderAudioQualityIOSType <> JS AVEncoderAudioQualityIOSType (enum)
  template <>
  struct JSIConverter<margelo::nitro::audiorecorderplayer::AVEncoderAudioQualityIOSType> final {
    static inline margelo::nitro::audiorecorderplayer::AVEncoderAudioQualityIOSType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<margelo::nitro::audiorecorderplayer::AVEncoderAudioQualityIOSType>(enumValue);
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::audiorecorderplayer::AVEncoderAudioQualityIOSType arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(runtime, enumValue);
    }
    static inline bool canConvert(jsi::Runtime&, const jsi::Value& value) {
      if (!value.isNumber()) {
        return false;
      }
      double number = value.getNumber();
      int integer = static_cast<int>(number);
      if (number != integer) {
        // The integer is not the same value as the double - we truncated floating points.
        // Enums are all integers, so the input floating point number is obviously invalid.
        return false;
      }
      switch (integer) {
        case 0 /* MIN */: return true;
        case 32 /* LOW */: return true;
        case 64 /* MEDIUM */: return true;
        case 96 /* HIGH */: return true;
        case 127 /* MAX */: return true;
        default: return false;
      }
    }
  };

} // namespace margelo::nitro
