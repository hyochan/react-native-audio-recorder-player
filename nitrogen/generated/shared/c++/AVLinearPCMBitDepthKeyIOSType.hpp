///
/// AVLinearPCMBitDepthKeyIOSType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::audiorecorderplayer {

  /**
   * An enum which can be represented as a JavaScript enum (AVLinearPCMBitDepthKeyIOSType).
   */
  enum class AVLinearPCMBitDepthKeyIOSType {
    BIT8      SWIFT_NAME(bit8) = 8,
    BIT16      SWIFT_NAME(bit16) = 16,
    BIT24      SWIFT_NAME(bit24) = 24,
    BIT32      SWIFT_NAME(bit32) = 32,
  } CLOSED_ENUM;

} // namespace margelo::nitro::audiorecorderplayer

namespace margelo::nitro {

  using namespace margelo::nitro::audiorecorderplayer;

  // C++ AVLinearPCMBitDepthKeyIOSType <> JS AVLinearPCMBitDepthKeyIOSType (enum)
  template <>
  struct JSIConverter<AVLinearPCMBitDepthKeyIOSType> final {
    static inline AVLinearPCMBitDepthKeyIOSType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      int enumValue = JSIConverter<int>::fromJSI(runtime, arg);
      return static_cast<AVLinearPCMBitDepthKeyIOSType>(enumValue);
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, AVLinearPCMBitDepthKeyIOSType arg) {
      int enumValue = static_cast<int>(arg);
      return JSIConverter<int>::toJSI(runtime, enumValue);
    }
    static inline bool canConvert(jsi::Runtime&, const jsi::Value& value) {
      if (!value.isNumber()) {
        return false;
      }
      double number = value.getNumber();
      int integer = static_cast<int>(number);
      if (number != integer) {
        // The integer is not the same value as the double - we truncated floating points.
        // Enums are all integers, so the input floating point number is obviously invalid.
        return false;
      }
      switch (integer) {
        case 8 /* BIT8 */: return true;
        case 16 /* BIT16 */: return true;
        case 24 /* BIT24 */: return true;
        case 32 /* BIT32 */: return true;
        default: return false;
      }
    }
  };

} // namespace margelo::nitro
