///
/// AVModeIOSOption.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::audiorecorderplayer {

  /**
   * An enum which can be represented as a JavaScript union (AVModeIOSOption).
   */
  enum class AVModeIOSOption {
    GAMECHATAUDIO      SWIFT_NAME(gamechataudio) = 0,
    MEASUREMENT      SWIFT_NAME(measurement) = 1,
    MOVIEPLAYBACK      SWIFT_NAME(movieplayback) = 2,
    SPOKENAUDIO      SWIFT_NAME(spokenaudio) = 3,
    VIDEOCHAT      SWIFT_NAME(videochat) = 4,
    VIDEORECORDING      SWIFT_NAME(videorecording) = 5,
    VOICECHAT      SWIFT_NAME(voicechat) = 6,
    VOICEPROMPT      SWIFT_NAME(voiceprompt) = 7,
  } CLOSED_ENUM;

} // namespace margelo::nitro::audiorecorderplayer

namespace margelo::nitro {

  // C++ AVModeIOSOption <> JS AVModeIOSOption (union)
  template <>
  struct JSIConverter<margelo::nitro::audiorecorderplayer::AVModeIOSOption> final {
    static inline margelo::nitro::audiorecorderplayer::AVModeIOSOption fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("gameChatAudio"): return margelo::nitro::audiorecorderplayer::AVModeIOSOption::GAMECHATAUDIO;
        case hashString("measurement"): return margelo::nitro::audiorecorderplayer::AVModeIOSOption::MEASUREMENT;
        case hashString("moviePlayback"): return margelo::nitro::audiorecorderplayer::AVModeIOSOption::MOVIEPLAYBACK;
        case hashString("spokenAudio"): return margelo::nitro::audiorecorderplayer::AVModeIOSOption::SPOKENAUDIO;
        case hashString("videoChat"): return margelo::nitro::audiorecorderplayer::AVModeIOSOption::VIDEOCHAT;
        case hashString("videoRecording"): return margelo::nitro::audiorecorderplayer::AVModeIOSOption::VIDEORECORDING;
        case hashString("voiceChat"): return margelo::nitro::audiorecorderplayer::AVModeIOSOption::VOICECHAT;
        case hashString("voicePrompt"): return margelo::nitro::audiorecorderplayer::AVModeIOSOption::VOICEPROMPT;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum AVModeIOSOption - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::audiorecorderplayer::AVModeIOSOption arg) {
      switch (arg) {
        case margelo::nitro::audiorecorderplayer::AVModeIOSOption::GAMECHATAUDIO: return JSIConverter<std::string>::toJSI(runtime, "gameChatAudio");
        case margelo::nitro::audiorecorderplayer::AVModeIOSOption::MEASUREMENT: return JSIConverter<std::string>::toJSI(runtime, "measurement");
        case margelo::nitro::audiorecorderplayer::AVModeIOSOption::MOVIEPLAYBACK: return JSIConverter<std::string>::toJSI(runtime, "moviePlayback");
        case margelo::nitro::audiorecorderplayer::AVModeIOSOption::SPOKENAUDIO: return JSIConverter<std::string>::toJSI(runtime, "spokenAudio");
        case margelo::nitro::audiorecorderplayer::AVModeIOSOption::VIDEOCHAT: return JSIConverter<std::string>::toJSI(runtime, "videoChat");
        case margelo::nitro::audiorecorderplayer::AVModeIOSOption::VIDEORECORDING: return JSIConverter<std::string>::toJSI(runtime, "videoRecording");
        case margelo::nitro::audiorecorderplayer::AVModeIOSOption::VOICECHAT: return JSIConverter<std::string>::toJSI(runtime, "voiceChat");
        case margelo::nitro::audiorecorderplayer::AVModeIOSOption::VOICEPROMPT: return JSIConverter<std::string>::toJSI(runtime, "voicePrompt");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert AVModeIOSOption to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("gameChatAudio"):
        case hashString("measurement"):
        case hashString("moviePlayback"):
        case hashString("spokenAudio"):
        case hashString("videoChat"):
        case hashString("videoRecording"):
        case hashString("voiceChat"):
        case hashString("voicePrompt"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
